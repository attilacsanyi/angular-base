{
  "rulesDirectory": [
    "node_modules/codelyzer",
    "tslint-consistent-codestyle"
  ],
  "extends": [
    "rxjs-tslint-rules"
  ],
  "rules": {
    "arrow-return-shorthand": true,
    "callable-types": true,
    "class-name": true,
    "comment-format": [
      true,
      "check-space"
    ],
    "curly": [
      true,
      "as-needed"
    ],
    "eofline": true,
    "forin": true,
    "import-blacklist": [
      true,
      "rxjs"
    ],
    "import-spacing": true,
    "indent": [
      true,
      "spaces"
    ],
    "interface-over-type-literal": true,
    "label-position": true,
    "max-line-length": [
      true,
      140
    ],
    "member-access": false,
    "member-ordering": [
      true,
      {
        "order": [
          "static-field",
          "instance-field",
          "static-method",
          "instance-method"
        ]
      }
    ],
    "no-arg": true,
    "no-bitwise": true,
    "no-console": [
      true,
      "debug",
      "info",
      "time",
      "timeEnd",
      "trace"
    ],
    "no-construct": true,
    "no-debugger": true,
    "no-duplicate-super": true,
    "no-empty": false,
    "no-empty-interface": true,
    "no-eval": true,
    "no-inferrable-types": [
      true,
      "ignore-params"
    ],
    "no-misused-new": true,
    "no-non-null-assertion": true,
    "no-shadowed-variable": true,
    "no-string-literal": false,
    "no-string-throw": true,
    "no-switch-case-fall-through": true,
    "no-trailing-whitespace": true,
    "no-unnecessary-initializer": true,
    "no-unused-expression": true,
    "no-use-before-declare": true,
    "no-var-keyword": true,
    "no-unused-variable": [
      true,
      "check-parameters",
      {
        "ignore-pattern": "^_"
      }
    ],
    "object-literal-sort-keys": false,
    "one-line": [
      true,
      "check-open-brace",
      "check-catch",
      "check-else",
      "check-whitespace"
    ],
    "prefer-const": true,
    "quotemark": [
      true,
      "single"
    ],
    "radix": true,
    "semicolon": [
      true,
      "always"
    ],
    "triple-equals": [
      true,
      "allow-null-check"
    ],
    "typedef-whitespace": [
      true,
      {
        "call-signature": "nospace",
        "index-signature": "nospace",
        "parameter": "nospace",
        "property-declaration": "nospace",
        "variable-declaration": "nospace"
      }
    ],
    "typeof-compare": true,
    "unified-signatures": true,
    "variable-name": false,
    "whitespace": [
      true,
      "check-branch",
      "check-decl",
      "check-operator",
      "check-separator",
      "check-type"
    ],
    "directive-selector": [
      true,
      "attribute",
      "ac",
      "camelCase"
    ],
    "component-selector": [
      true,
      "element",
      "ac",
      "kebab-case"
    ],
    "use-input-property-decorator": true,
    "use-output-property-decorator": true,
    "use-host-property-decorator": true,
    "no-input-rename": true,
    "no-output-rename": true,
    "use-life-cycle-interface": true,
    "use-pipe-transform-interface": true,
    "component-class-suffix": true,
    "directive-class-suffix": true,
    "no-access-missing-member": true,
    "templates-use-public": true,
    "invoke-injectable": true,
    "pipe-impure": true,
    "no-attribute-parameter-decorator": true,
    "no-forward-ref": true,
    "no-unused-css": true,
    "use-pipe-decorator": true,
    "naming-convention": [
      true,
      // forbid leading and trailing underscores and enforce camelCase on EVERY name. will be overridden by subtypes if needed
      {
        "type": "default",
        "format": "camelCase",
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      // allow leading underscores for parameters, because `tsc --noUnusedParameters` will not flag underscore prefixed parameters
      // all other rules (trailingUnderscore: forbid, format: camelCase) still apply
      // since we don't want to inherit this config to `parameterProperties`, we set `final = true`
      {
        "type": "parameter",
        "leadingUnderscore": "allow",
        "final": true
      },
      // exclicitly disable the format check only for method toJSON
      {
        "type": "method",
        "filter": "^toJSON$",
        "format": null
      },
      // enforce UPPER_CASE for all public static readonly(!) properties
      {
        "type": "property",
        "modifiers": [
          "public",
          "static",
          "const"
        ],
        "format": "UPPER_CASE"
      },
      // enforce PascalCase for classes, interfaces, enums, etc. Remember, there are still no underscores allowed.
      {
        "type": "type",
        "format": "PascalCase"
      },
      // abstract classes must have the prefix "Abstract". The following part of the name must be valid PascalCase
      {
        "type": "class",
        "modifiers": "abstract",
        "prefix": "Abstract"
      },
      // generic type parameters must start with "T"
      // most of the time it will only be T, which is totally valid, because an empty string conforms to the PascalCase check
      // By convention T, U and V are used for generics. You could enforce that with "regex": "^[TUV]$" and if you are care that much for performance, you could disable every other check by setting a falsy value
      {
        "type": "genericTypeParameter",
        "regex": "^[TUV]$"
      },
      // enum members must be in PascalCase. Without this config, enumMember would inherit UPPER_CASE from public static const property
      {
        "type": "enumMember",
        "format": "PascalCase"
      }
    ],
    "early-exit": [
      true,
      {
        "max-length": 4
      }
    ],
    "no-angle-bracket-type-assertion": true,
    "no-collapsible-if": "true",
    "no-unnecessary-else": "true",
    "no-return-undefined": [
      "true",
      {
        "allow-void-expression": true
      }
    ],
    "no-unused": "true",
    "no-var-before-return": "true",
    "object-shorthand-properties-first": "true",
    "parameter-properties": [
      true,
      "leading", // forces parameter properties to precede regular parameters
      "member-access" // forces an access modifier for every parameter property
    ],
    "prefer-const-enum": true,
    "prefer-while": true,
    "rxjs-no-add": {
      "severity": "error"
    },
    "rxjs-no-operator": {
      "severity": "error"
    },
    "rxjs-no-patched": {
      "severity": "error"
    },
    "rxjs-no-wholesale": {
      "severity": "error"
    }
  }
}
