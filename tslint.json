{
  "rulesDirectory": ["node_modules/codelyzer", "tslint-consistent-codestyle"],
  "extends": ["rxjs-tslint-rules"],
  "rules": {
    "arrow-return-shorthand": true,
    "callable-types": true,
    "class-name": true,
    "forin": true,
    "interface-over-type-literal": true,
    "label-position": true,
    "member-access": false,
    "member-ordering": [
      true,
      {
        "order": ["static-field", "instance-field", "static-method", "instance-method"]
      }
    ],
    "no-arg": true,
    "no-bitwise": true,
    "no-console": [true, "debug", "info", "time", "timeEnd", "trace"],
    "no-construct": true,
    "no-debugger": true,
    "no-duplicate-super": true,
    "no-empty": false,
    "no-empty-interface": true,
    "no-eval": true,
    "no-inferrable-types": [true, "ignore-params"],
    "no-misused-new": true,
    "no-non-null-assertion": false,
    "no-shadowed-variable": true,
    "no-string-literal": false,
    "no-string-throw": true,
    "no-switch-case-fall-through": true,
    "no-unnecessary-initializer": true,
    "no-unused-expression": true,
    "no-use-before-declare": true,
    "no-var-keyword": true,
    "no-unused-variable": [
      true,
      "check-parameters",
      {
        "ignore-pattern": "^_"
      }
    ],
    "object-literal-sort-keys": false,
    "prefer-const": true,
    "radix": true,
    "triple-equals": [true, "allow-null-check"],
    "unified-signatures": true,
    "variable-name": false,
    "whitespace": [true, "check-branch", "check-decl", "check-operator", "check-separator", "check-type"],
    //-----------------------
    // Codelyzer
    //-----------------------
    "angular-whitespace": [true, "check-interpolation", "check-semicolon"],
    "banana-in-box": true,
    "templates-no-negated-async": true,
    "directive-selector": [true, "attribute", "ac", "camelCase"],
    "component-selector": [true, "element", "ac", "kebab-case"],
    "max-inline-declarations": true,
    "no-life-cycle-call": true,
    "prefer-output-readonly": true,
    "no-conflicting-life-cycle-hooks": true,
    "enforce-component-selector": true,
    "use-input-property-decorator": true,
    "use-output-property-decorator": true,
    "use-host-property-decorator": true,
    "use-view-encapsulation": true,
    "no-attribute-parameter-decorator": true,
    "no-output-named-after-standard-event": true,
    "no-input-rename": true,
    "no-output-rename": true,
    "no-output-on-prefix": true,
    "no-forward-ref": true,
    "no-unused-css": true,
    "use-life-cycle-interface": true,
    "contextual-life-cycle": true,
    "trackBy-function": true,
    "use-pipe-transform-interface": true,
    "component-class-suffix": true,
    "directive-class-suffix": true,
    "pipe-impure": true,
    "i18n": [false, "check-id", "check-text"],
    "template-cyclomatic-complexity": [true, 5],
    "template-conditional-complexity": [true, 4],
    "use-pipe-decorator": true,
    //-----------------------
    // Consistent Codestyle
    //-----------------------
    "naming-convention": [
      true,
      // forbid leading and trailing underscores and enforce camelCase on EVERY name. will be overridden by subtypes if needed
      {
        "type": "default",
        "format": "camelCase",
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      // allow leading underscores for parameters, because `tsc --noUnusedParameters` will not flag underscore prefixed parameters
      // all other rules (trailingUnderscore: forbid, format: camelCase) still apply
      // since we don't want to inherit this config to `parameterProperties`, we set `final = true`
      {
        "type": "parameter",
        "leadingUnderscore": "allow",
        "final": true
      },
      // exclicitly disable the format check only for method toJSON
      {
        "type": "method",
        "filter": "^toJSON$",
        "format": null
      },
      // enforce UPPER_CASE for all public static readonly(!) properties
      {
        "type": "property",
        "modifiers": ["public", "static", "const"],
        "format": "UPPER_CASE"
      },
      // enforce PascalCase for classes, interfaces, enums, etc. Remember, there are still no underscores allowed.
      {
        "type": "type",
        "format": "PascalCase"
      },
      // abstract classes must have the prefix "Abstract". The following part of the name must be valid PascalCase
      {
        "type": "class",
        "modifiers": "abstract",
        "prefix": "Abstract"
      },
      // generic type parameters must start with "T"
      // most of the time it will only be T, which is totally valid, because an empty string conforms to the PascalCase check
      // By convention T, U and V are used for generics. You could enforce that with "regex": "^[TUV]$" and if you are care that much for performance, you could disable every other check by setting a falsy value
      {
        "type": "genericTypeParameter",
        "regex": "^[A-Z]$"
      },
      // enum members must be in PascalCase. Without this config, enumMember would inherit UPPER_CASE from public static const property
      {
        "type": "enumMember",
        "format": "PascalCase"
      }
    ],
    "const-parameters": true,
    "early-exit": [
      true,
      {
        "max-length": 4
      }
    ],
    "no-angle-bracket-type-assertion": true,
    "no-collapsible-if": true,
    "no-unnecessary-else": true,
    "no-accessor-recursion": true,
    "no-unnecessary-type-annotation": true,
    "no-return-undefined": [
      true,
      {
        "allow-void-expression": true
      }
    ],
    "no-unused": [true, "unused-catch-binding"],
    "no-var-before-return": true,
    "object-shorthand-properties-first": true,
    "parameter-properties": [
      true,
      "leading", // forces parameter properties to precede regular parameters
      "member-access" // forces an access modifier for every parameter property
    ],
    "prefer-const-enum": true,
    "prefer-while": true,
    //-----------------------
    // RxJs Rules
    //-----------------------
    "rxjs-no-subject-unsubscribe": {
      "severity": "error"
    },
    "rxjs-no-unsafe-switchmap": true,
    "rxjs-no-unsafe-takeuntil": true,
    "rxjs-ban-observables": {
      "options": [
        {
          "empty": "Use EMPTY",
          "never": "Use NEVER"
        }
      ],
      "severity": "error"
    },
    "rxjs-ban-operators": {
      "options": [
        {
          "combineLatest": "Use the static combineLatest",
          "concat": "Use the static concat",
          "merge": "Use the static merge",
          "race": "Use the static race",
          "zip": "Use the static zip"
        }
      ],
      "severity": "error"
    }
  }
}
